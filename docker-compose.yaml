services:
  agent:
    image: datadog/agent:7-beta
    volumes:
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /proc/:/host/proc/:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    pid: host
    cgroup: host
    environment:
      - DD_LOG_LEVEL=debug
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_APM_ERROR_TRACKING_STANDALONE_ENABLED=false
      - DD_APM_ENABLE_RARE_SAMPLER=false
      - DD_APM_PROBABILISTIC_SAMPLER_ENABLED=false
      - DD_APM_PROBABILISTIC_SAMPLER_SAMPLING_PERCENTAGE=100
      - DD_OTLP_CONFIG_RECEIVER_PROTOCOLS_GRPC_ENDPOINT=0.0.0.0:4317
      - DD_OTLP_CONFIG_RECEIVER_PROTOCOLS_HTTP_ENDPOINT=0.0.0.0:4318
      - DD_OTLP_CONFIG_DEBUG_VERBOSITY=detailed
      - DD_INTERNAL_PROFILING_ENABLED=true # Profiling for the Datadog Agent.
      - DD_INTEGRATION_TRACING=false # Tracing for the Datadog Agent's integrations. E.g., mysql check.
      - DD_INTEGRATION_PROFILING=false # Profiling for the Datadog Agent's integrations. E.g., mysql check.
    env_file:
      - .env
  frontend:
    build:
      context: ./frontend
      target: ${APM_TARGET}
    depends_on:
      - gateway
    ports:
      - 16163:80 # Browser -> Web Server (Nginx) -> UI
    environment:
      - DD_SERVICE=ddfeed-frontend
      - DD_TRACE_DEBUG=true
      - DD_TRACE_STARTUP_LOGS=true
      - DD_TRACE_REMOVE_INTEGRATION_SERVICE_NAMES_ENABLED=true
    env_file:
      - .env
  gateway:
    build:
      context: ./gateway
      args:
        - APM_TARGET=${APM_TARGET}
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - 16080:8080 # UI -> Gateway (Envoy) -> Backend
    environment:
      - DD_TRACE_DEBUG=true
      - DD_TRACE_STARTUP_LOGS=true
      - DD_TRACE_REMOVE_INTEGRATION_SERVICE_NAMES_ENABLED=true
    env_file:
      - .env
  backend:
    build:
      context: ./backend
      target: ${APM_TARGET}
    depends_on:
      mysql:
        condition: service_healthy
      valkey:
        condition: service_started
    environment:
      # Use `interpolateParams=true` to inline query parameters into SQL statements.
      # This is required for Datadog Agent to capture full queries with parameters,
      # and for queries to appear in MySQL's `performance_schema.events_statements_%`.
      # Relevant info:
      # - https://github.com/go-sql-driver/mysql/issues/413
      # - https://stackoverflow.com/questions/37683218/golang-sql-drivers-prepare-statement
      - DDFEED_BACKEND_DATA_SOURCE_NAME=backend:password@tcp(mysql:3306)/ddfeed?interpolateParams=true # user:password@tcp(host:port)/database
      - DDFEED_BACKEND_PORT=8080
      # Datadog
      - DD_SERVICE=ddfeed-backend
      - DD_VERSION=${GIT_COMMIT_SHA} # git rev-parse HEAD
      - DD_TRACE_DEBUG=false
      - DD_TRACE_STARTUP_LOGS=false
      - DD_TRACE_REMOVE_INTEGRATION_SERVICE_NAMES_ENABLED=true
      - DD_DBM_PROPAGATION_MODE=full
      - DD_PROFILING_ENABLED=true
      - DD_GIT_REPOSITORY_URL=github.com/keisku/ddfeed
      - DD_GIT_COMMIT_SHA=${GIT_COMMIT_SHA}
      # OTel
      - OTEL_EXPORTER_OTLP_ENDPOINT=agent:4317
      - OTEL_SERVICE_NAME=ddfeed-backend
      - OTEL_TRACE_DEBUG=false
      - OTEL_RESOURCE_ATTRIBUTES=service.version=${GIT_COMMIT_SHA},git.commit.sha=${GIT_COMMIT_SHA},git.repository_url=github.com/keisku/ddfeed
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/readiness"]
      interval: 300s
      timeout: 5s
      retries: 5
      start_period: 5s
  mysql:
    image: mysql:8
    labels:
      com.datadoghq.ad.checks: |
        {
          "mysql": {
            "instances": [
              {
                "host": "%%host%%",
                "port": "3306",
                "username": "datadog",
                "password": "datadog",
                "reported_hostname": "ddfeed",
                "dbm": true,
                "collect_settings": {
                  "enabled": true
                }
              }
            ]
          }
        }
    volumes:
      - ./mysql/init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./mysql/performance-schema.cnf:/etc/mysql/conf.d/performance-schema.cnf
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: datadog
      MYSQL_PASSWORD: datadog
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-ppassword"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
  valkey:
    image: valkey/valkey:8
